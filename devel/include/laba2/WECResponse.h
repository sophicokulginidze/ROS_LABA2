// Generated by gencpp from file laba2/WECResponse.msg
// DO NOT EDIT!


#ifndef LABA2_MESSAGE_WECRESPONSE_H
#define LABA2_MESSAGE_WECRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace laba2
{
template <class ContainerAllocator>
struct WECResponse_
{
  typedef WECResponse_<ContainerAllocator> Type;

  WECResponse_()
    : capital()
    , population(0)  {
    }
  WECResponse_(const ContainerAllocator& _alloc)
    : capital(_alloc)
    , population(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _capital_type;
  _capital_type capital;

   typedef int32_t _population_type;
  _population_type population;





  typedef boost::shared_ptr< ::laba2::WECResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::laba2::WECResponse_<ContainerAllocator> const> ConstPtr;

}; // struct WECResponse_

typedef ::laba2::WECResponse_<std::allocator<void> > WECResponse;

typedef boost::shared_ptr< ::laba2::WECResponse > WECResponsePtr;
typedef boost::shared_ptr< ::laba2::WECResponse const> WECResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::laba2::WECResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::laba2::WECResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::laba2::WECResponse_<ContainerAllocator1> & lhs, const ::laba2::WECResponse_<ContainerAllocator2> & rhs)
{
  return lhs.capital == rhs.capital &&
    lhs.population == rhs.population;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::laba2::WECResponse_<ContainerAllocator1> & lhs, const ::laba2::WECResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace laba2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::laba2::WECResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::laba2::WECResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laba2::WECResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::laba2::WECResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laba2::WECResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::laba2::WECResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::laba2::WECResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a84142b0fb7fd2da9fd3f1b1a002e959";
  }

  static const char* value(const ::laba2::WECResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa84142b0fb7fd2daULL;
  static const uint64_t static_value2 = 0x9fd3f1b1a002e959ULL;
};

template<class ContainerAllocator>
struct DataType< ::laba2::WECResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "laba2/WECResponse";
  }

  static const char* value(const ::laba2::WECResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::laba2::WECResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string capital\n"
"int32 population\n"
"\n"
;
  }

  static const char* value(const ::laba2::WECResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::laba2::WECResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.capital);
      stream.next(m.population);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WECResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::laba2::WECResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::laba2::WECResponse_<ContainerAllocator>& v)
  {
    s << indent << "capital: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.capital);
    s << indent << "population: ";
    Printer<int32_t>::stream(s, indent + "  ", v.population);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LABA2_MESSAGE_WECRESPONSE_H
